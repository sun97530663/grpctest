// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: CommunicationProtos/greetinstructions.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace greeter {
  /// <summary>
  ///定义服务
  /// </summary>
  public static partial class SendInstruction
  {
    static readonly string __ServiceName = "HelloGrpcTest.SendInstruction";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::greeter.SayHelloRequest> __Marshaller_HelloGrpcTest_SayHelloRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::greeter.SayHelloRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::greeter.SayHelloResult> __Marshaller_HelloGrpcTest_SayHelloResult = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::greeter.SayHelloResult.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::greeter.ExecuteCommandRequest> __Marshaller_HelloGrpcTest_ExecuteCommandRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::greeter.ExecuteCommandRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::greeter.ExecuteCommandResult> __Marshaller_HelloGrpcTest_ExecuteCommandResult = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::greeter.ExecuteCommandResult.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::greeter.AgvOnlineStateRequest> __Marshaller_HelloGrpcTest_AgvOnlineStateRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::greeter.AgvOnlineStateRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::greeter.GetOnlineAgvPointsRequest> __Marshaller_HelloGrpcTest_GetOnlineAgvPointsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::greeter.GetOnlineAgvPointsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::greeter.GetOnlineAgvPointsResult> __Marshaller_HelloGrpcTest_GetOnlineAgvPointsResult = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::greeter.GetOnlineAgvPointsResult.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::greeter.SayHelloRequest, global::greeter.SayHelloResult> __Method_SayHellos = new grpc::Method<global::greeter.SayHelloRequest, global::greeter.SayHelloResult>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SayHellos",
        __Marshaller_HelloGrpcTest_SayHelloRequest,
        __Marshaller_HelloGrpcTest_SayHelloResult);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::greeter.ExecuteCommandRequest, global::greeter.ExecuteCommandResult> __Method_ExecuteCommand = new grpc::Method<global::greeter.ExecuteCommandRequest, global::greeter.ExecuteCommandResult>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ExecuteCommand",
        __Marshaller_HelloGrpcTest_ExecuteCommandRequest,
        __Marshaller_HelloGrpcTest_ExecuteCommandResult);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::greeter.AgvOnlineStateRequest, global::greeter.ExecuteCommandResult> __Method_AgvOnlineStateCommand = new grpc::Method<global::greeter.AgvOnlineStateRequest, global::greeter.ExecuteCommandResult>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AgvOnlineStateCommand",
        __Marshaller_HelloGrpcTest_AgvOnlineStateRequest,
        __Marshaller_HelloGrpcTest_ExecuteCommandResult);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::greeter.AgvOnlineStateRequest, global::greeter.ExecuteCommandResult> __Method_AgvRefuseOnlineCommand = new grpc::Method<global::greeter.AgvOnlineStateRequest, global::greeter.ExecuteCommandResult>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AgvRefuseOnlineCommand",
        __Marshaller_HelloGrpcTest_AgvOnlineStateRequest,
        __Marshaller_HelloGrpcTest_ExecuteCommandResult);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::greeter.AgvOnlineStateRequest, global::greeter.ExecuteCommandResult> __Method_AgvOfflineStateCommand = new grpc::Method<global::greeter.AgvOnlineStateRequest, global::greeter.ExecuteCommandResult>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AgvOfflineStateCommand",
        __Marshaller_HelloGrpcTest_AgvOnlineStateRequest,
        __Marshaller_HelloGrpcTest_ExecuteCommandResult);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::greeter.GetOnlineAgvPointsRequest, global::greeter.GetOnlineAgvPointsResult> __Method_GetOnlineAgvPoints = new grpc::Method<global::greeter.GetOnlineAgvPointsRequest, global::greeter.GetOnlineAgvPointsResult>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetOnlineAgvPoints",
        __Marshaller_HelloGrpcTest_GetOnlineAgvPointsRequest,
        __Marshaller_HelloGrpcTest_GetOnlineAgvPointsResult);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::greeter.GreetinstructionsReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of SendInstruction</summary>
    [grpc::BindServiceMethod(typeof(SendInstruction), "BindService")]
    public abstract partial class SendInstructionBase
    {
      /// <summary>
      ///定义方法
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::greeter.SayHelloResult> SayHellos(global::greeter.SayHelloRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///发送指令
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::greeter.ExecuteCommandResult> ExecuteCommand(global::greeter.ExecuteCommandRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///允许上线
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::greeter.ExecuteCommandResult> AgvOnlineStateCommand(global::greeter.AgvOnlineStateRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///拒绝上线
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::greeter.ExecuteCommandResult> AgvRefuseOnlineCommand(global::greeter.AgvOnlineStateRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///允许下线
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::greeter.ExecuteCommandResult> AgvOfflineStateCommand(global::greeter.AgvOnlineStateRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::greeter.GetOnlineAgvPointsResult> GetOnlineAgvPoints(global::greeter.GetOnlineAgvPointsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for SendInstruction</summary>
    public partial class SendInstructionClient : grpc::ClientBase<SendInstructionClient>
    {
      /// <summary>Creates a new client for SendInstruction</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public SendInstructionClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for SendInstruction that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public SendInstructionClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected SendInstructionClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected SendInstructionClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      ///定义方法
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::greeter.SayHelloResult SayHellos(global::greeter.SayHelloRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SayHellos(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///定义方法
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::greeter.SayHelloResult SayHellos(global::greeter.SayHelloRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SayHellos, null, options, request);
      }
      /// <summary>
      ///定义方法
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::greeter.SayHelloResult> SayHellosAsync(global::greeter.SayHelloRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SayHellosAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///定义方法
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::greeter.SayHelloResult> SayHellosAsync(global::greeter.SayHelloRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SayHellos, null, options, request);
      }
      /// <summary>
      ///发送指令
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::greeter.ExecuteCommandResult ExecuteCommand(global::greeter.ExecuteCommandRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ExecuteCommand(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///发送指令
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::greeter.ExecuteCommandResult ExecuteCommand(global::greeter.ExecuteCommandRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ExecuteCommand, null, options, request);
      }
      /// <summary>
      ///发送指令
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::greeter.ExecuteCommandResult> ExecuteCommandAsync(global::greeter.ExecuteCommandRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ExecuteCommandAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///发送指令
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::greeter.ExecuteCommandResult> ExecuteCommandAsync(global::greeter.ExecuteCommandRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ExecuteCommand, null, options, request);
      }
      /// <summary>
      ///允许上线
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::greeter.ExecuteCommandResult AgvOnlineStateCommand(global::greeter.AgvOnlineStateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AgvOnlineStateCommand(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///允许上线
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::greeter.ExecuteCommandResult AgvOnlineStateCommand(global::greeter.AgvOnlineStateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AgvOnlineStateCommand, null, options, request);
      }
      /// <summary>
      ///允许上线
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::greeter.ExecuteCommandResult> AgvOnlineStateCommandAsync(global::greeter.AgvOnlineStateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AgvOnlineStateCommandAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///允许上线
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::greeter.ExecuteCommandResult> AgvOnlineStateCommandAsync(global::greeter.AgvOnlineStateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AgvOnlineStateCommand, null, options, request);
      }
      /// <summary>
      ///拒绝上线
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::greeter.ExecuteCommandResult AgvRefuseOnlineCommand(global::greeter.AgvOnlineStateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AgvRefuseOnlineCommand(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///拒绝上线
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::greeter.ExecuteCommandResult AgvRefuseOnlineCommand(global::greeter.AgvOnlineStateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AgvRefuseOnlineCommand, null, options, request);
      }
      /// <summary>
      ///拒绝上线
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::greeter.ExecuteCommandResult> AgvRefuseOnlineCommandAsync(global::greeter.AgvOnlineStateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AgvRefuseOnlineCommandAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///拒绝上线
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::greeter.ExecuteCommandResult> AgvRefuseOnlineCommandAsync(global::greeter.AgvOnlineStateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AgvRefuseOnlineCommand, null, options, request);
      }
      /// <summary>
      ///允许下线
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::greeter.ExecuteCommandResult AgvOfflineStateCommand(global::greeter.AgvOnlineStateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AgvOfflineStateCommand(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///允许下线
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::greeter.ExecuteCommandResult AgvOfflineStateCommand(global::greeter.AgvOnlineStateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AgvOfflineStateCommand, null, options, request);
      }
      /// <summary>
      ///允许下线
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::greeter.ExecuteCommandResult> AgvOfflineStateCommandAsync(global::greeter.AgvOnlineStateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AgvOfflineStateCommandAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///允许下线
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::greeter.ExecuteCommandResult> AgvOfflineStateCommandAsync(global::greeter.AgvOnlineStateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AgvOfflineStateCommand, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::greeter.GetOnlineAgvPointsResult GetOnlineAgvPoints(global::greeter.GetOnlineAgvPointsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetOnlineAgvPoints(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::greeter.GetOnlineAgvPointsResult GetOnlineAgvPoints(global::greeter.GetOnlineAgvPointsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetOnlineAgvPoints, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::greeter.GetOnlineAgvPointsResult> GetOnlineAgvPointsAsync(global::greeter.GetOnlineAgvPointsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetOnlineAgvPointsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::greeter.GetOnlineAgvPointsResult> GetOnlineAgvPointsAsync(global::greeter.GetOnlineAgvPointsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetOnlineAgvPoints, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override SendInstructionClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new SendInstructionClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(SendInstructionBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_SayHellos, serviceImpl.SayHellos)
          .AddMethod(__Method_ExecuteCommand, serviceImpl.ExecuteCommand)
          .AddMethod(__Method_AgvOnlineStateCommand, serviceImpl.AgvOnlineStateCommand)
          .AddMethod(__Method_AgvRefuseOnlineCommand, serviceImpl.AgvRefuseOnlineCommand)
          .AddMethod(__Method_AgvOfflineStateCommand, serviceImpl.AgvOfflineStateCommand)
          .AddMethod(__Method_GetOnlineAgvPoints, serviceImpl.GetOnlineAgvPoints).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, SendInstructionBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_SayHellos, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::greeter.SayHelloRequest, global::greeter.SayHelloResult>(serviceImpl.SayHellos));
      serviceBinder.AddMethod(__Method_ExecuteCommand, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::greeter.ExecuteCommandRequest, global::greeter.ExecuteCommandResult>(serviceImpl.ExecuteCommand));
      serviceBinder.AddMethod(__Method_AgvOnlineStateCommand, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::greeter.AgvOnlineStateRequest, global::greeter.ExecuteCommandResult>(serviceImpl.AgvOnlineStateCommand));
      serviceBinder.AddMethod(__Method_AgvRefuseOnlineCommand, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::greeter.AgvOnlineStateRequest, global::greeter.ExecuteCommandResult>(serviceImpl.AgvRefuseOnlineCommand));
      serviceBinder.AddMethod(__Method_AgvOfflineStateCommand, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::greeter.AgvOnlineStateRequest, global::greeter.ExecuteCommandResult>(serviceImpl.AgvOfflineStateCommand));
      serviceBinder.AddMethod(__Method_GetOnlineAgvPoints, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::greeter.GetOnlineAgvPointsRequest, global::greeter.GetOnlineAgvPointsResult>(serviceImpl.GetOnlineAgvPoints));
    }

  }
}
#endregion
